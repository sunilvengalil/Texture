clear all;
close all;
clc;
lite = false;
save_report = 0;

datasetList = {'dtd'};

featureType = 'texton';
%featureType = 'dsift';
encTypes = {'fv'};

tag = 'ex';

meanAcc = zeros(numel(datasetList), numel(encTypes));
pmAcc = zeros(numel(datasetList), numel(encTypes));
ee=1;

jj = 2;
ex.trainOpts = {'C', 10} ;
ex.prefix = sprintf('%s-%s-seed-%d', encTypes{ee}, ...
        featureType, jj);
    
switch  encTypes{ee}
%          case 'fv'
%            ex.opts = {...
%              'type', encTypes{ee}, ...
%              'numWords', 256, ...
%              'layouts', {'1x1'}, ...
%              'numPcaDimensions', 80, ...
%              'extractorFn', @(x) getDenseSIFT(x, ...
%                                             'step', 4, ...
%                                           'scales', 2.^(1.5:-.5:-3))};

         case 'fv'
          ex.opts = {...
            'type', encTypes{ee}, ...
            'numWords', 256, ...
            'layouts', {'1x1'}, ...
            'numPcaDimensions', 80, ...
            'extractorFn', @(x) GetFilterFeatures(x)};
                
end


res = traintest1(...
        'prefix', [tag '-' datasetList{1} '-' ex.prefix], ...
        'seed', jj, ...
        'dataset', datasetList{1}, ...
        'datasetDir', fullfile('data', datasetList{1}), ...
        'lite', lite, ...
        'kernel', 'linear', ...
        'featureType', featureType, ...
         ex.trainOpts{:}, ...
        'encoderParams', ex.opts);

resAcc(jj) = res.mAcc * 100;

if (1 ~= numel(numSplits{ii}))
      resAcc = resAcc(numSplits{ii});
end
meanAcc(ii, ee) = mean(resAcc);
pmAcc(ii, ee) = std(resAcc);



